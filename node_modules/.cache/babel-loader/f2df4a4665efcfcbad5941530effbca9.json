{"ast":null,"code":"var _jsxFileName = \"E:\\\\repositories\\\\react-social\\\\src\\\\components\\\\common\\\\Paginator\\\\Paginator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport style from \"./Paginator.module.css\";\nimport cn from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Paginator = /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  [totalItemsCount, pageSize, currentPage, onPageNumberChanged, portionSize = 10] = props;\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages = [...pages, i];\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftLimitPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightLimitPageNumber = portionNumber * portionSize; // let quantityPageButtons = 24;\n  // let filteredPages = [];\n  // for (let i = 0; i < pages.length; i++) {\n  //     if (i > currentPage - 5 && i < currentPage + 6) {\n  //         filteredPages = [...filteredPages, i + 1]\n  //         continue;\n  //     }\n  // }\n\n  debugger;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.paginationButtonsContainer,\n    children: [// prev btn\n    portionNumber > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPortionNumber(portionNumber - 1);\n      },\n      children: \"prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this), pages.filter(p => p >= leftLimitPageNumber && p <= rightLimitPageNumber).map(p => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: cn({\n          [style.selectedPageNumberBtn]: currentPage === p\n        }, style.pageNumberBtn),\n        onClick: e => onPageNumberChanged(p),\n        children: p\n      }, p, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this);\n    }), // next btn\n    portionCount > portionNumber && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPortionNumber(portionNumber + 1),\n      children: \"next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}, \"8p8zb1vvZvsuWyQQS16DuuzsJLU=\"));\n_c2 = Paginator;\nexport default Paginator;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Paginator$React.memo\");\n$RefreshReg$(_c2, \"Paginator\");","map":{"version":3,"sources":["E:/repositories/react-social/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","style","cn","Paginator","memo","props","totalItemsCount","pageSize","currentPage","onPageNumberChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftLimitPageNumber","rightLimitPageNumber","paginationButtonsContainer","filter","p","map","selectedPageNumberBtn","pageNumberBtn","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;;AAEA,OAAO,MAAMC,SAAS,gBAAGJ,KAAK,CAACK,IAAN,SAAYC,KAAD,IAAW;AAAA;;AAC3C,GAAEC,eAAF,EACIC,QADJ,EAEIC,WAFJ,EAGIC,mBAHJ,EAIIC,WAAW,GAAG,EAJlB,IAKKL,KALL;AAOA,MAAIM,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAjB;AAEA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAWC,CAAX,CAAR;AACH;;AAED,MAAIC,YAAY,GAAGJ,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,WAAvB,CAAnB;AACA,MAAI,CAACO,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAImB,mBAAmB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBP,WAAtB,GAAoC,CAA9D;AACA,MAAIU,oBAAoB,GAAGH,aAAa,GAAGP,WAA3C,CAlB2C,CAoB3C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA,sBACI;AAAK,IAAA,SAAS,EAAET,KAAK,CAACoB,0BAAtB;AAAA,eAEQ;AACAJ,IAAAA,aAAa,GAAG,CAAhB,iBACA;AAAQ,MAAA,OAAO,EAAE,MAAM;AAAEC,QAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJR,EAQQH,KAAK,CACAQ,MADL,CACYC,CAAC,IACLA,CAAC,IAAIJ,mBAAL,IACAI,CAAC,IAAIH,oBAHb,EAKKI,GALL,CAKSD,CAAC,IAAI;AAEN,0BACA;AACI,QAAA,SAAS,EACLrB,EAAE,CAAC;AACC,WAACD,KAAK,CAACwB,qBAAP,GAA+BjB,WAAW,KAAKe;AADhD,SAAD,EAECtB,KAAK,CAACyB,aAFP,CAFV;AAOI,QAAA,OAAO,EAAEC,CAAC,IAAIlB,mBAAmB,CAACc,CAAD,CAPrC;AAAA,kBAQEA;AARF,SAMSA,CANT;AAAA;AAAA;AAAA;AAAA,cADA;AAYH,KAnBL,CARR,EAiCQ;AACAP,IAAAA,YAAY,GAAGC,aAAf,iBACA;AAAQ,MAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnCR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH,CAtEwB,kCAAlB;MAAMd,S;AAwEb,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport style from \"./Paginator.module.css\"\r\nimport cn from \"classnames\"\r\n\r\nexport const Paginator = React.memo((props) => {\r\n    [ totalItemsCount,\r\n        pageSize,\r\n        currentPage,\r\n        onPageNumberChanged,\r\n        portionSize = 10\r\n     ] = props;\r\n    \r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages = [...pages, i];\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftLimitPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightLimitPageNumber = portionNumber * portionSize;\r\n\r\n    // let quantityPageButtons = 24;\r\n    // let filteredPages = [];\r\n    // for (let i = 0; i < pages.length; i++) {\r\n\r\n    //     if (i > currentPage - 5 && i < currentPage + 6) {\r\n    //         filteredPages = [...filteredPages, i + 1]\r\n    //         continue;\r\n    //     }\r\n    // }\r\n    debugger;\r\n    return (\r\n        <div className={style.paginationButtonsContainer}>\r\n            {\r\n                // prev btn\r\n                portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>prev</button>\r\n            }\r\n\r\n            {\r\n                pages\r\n                    .filter(p =>\r\n                        p >= leftLimitPageNumber &&\r\n                        p <= rightLimitPageNumber\r\n                    )\r\n                    .map(p => {\r\n                        \r\n                        return (\r\n                        <span\r\n                            className={\r\n                                cn({\r\n                                    [style.selectedPageNumberBtn]: currentPage === p\r\n                                }, style.pageNumberBtn)\r\n                            }\r\n                            key={p}\r\n                            onClick={e => onPageNumberChanged(p)}\r\n                        >{p}\r\n                        </span>\r\n                        );\r\n                    }\r\n\r\n                    )\r\n            }\r\n\r\n            {\r\n                // next btn\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => setPortionNumber(portionNumber + 1)}>next</button>\r\n            }\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Paginator;"]},"metadata":{},"sourceType":"module"}