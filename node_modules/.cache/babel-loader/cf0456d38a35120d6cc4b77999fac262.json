{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = \"SET-USER-DATA\";\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  isFetching: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.data,\n          isAuth: true\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // action creators\n\n\nexport const setAuthUserData = (userId, email, login) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      userId,\n      email,\n      login\n    }\n  };\n}; // thunk creators\n\nexport const getAuthUserData = () => // thunk\ndispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode !== 0) {\n      return;\n    }\n\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login));\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode !== 0) {\n      return;\n    }\n\n    disp;\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["E:/repositories/react-social/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","isFetching","authReducer","state","action","type","data","setAuthUserData","getAuthUserData","dispatch","me","then","response","resultCode","id","password","rememberMe","disp"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE,KAJS;AAKjBC,EAAAA,UAAU,EAAE;AALK,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGQ,KADE;AAEL,aAAGC,MAAM,CAACE,IAFL;AAGLN,UAAAA,MAAM,EAAE;AAHH,SAAP;AAKD;;AAED;AAAS;AACP,eAAOG,KAAP;AACD;AAXH;AAaD,CAdD,C,CAgBA;;;AACA,OAAO,MAAMI,eAAe,GAAG,CAACV,MAAD,EAASC,KAAT,EAAgBC,KAAhB,KAA0B;AACvD,SAAO;AACLM,IAAAA,IAAI,EAAEV,aADD;AAELW,IAAAA,IAAI,EAAE;AACJT,MAAAA,MADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA;AAHI;AAFD,GAAP;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMS,eAAe,GAAG,MAC7B;AACCC,QAAD,IAAc;AACZf,EAAAA,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAmBC,QAAD,IAAc;AAC9B,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAClC;AACD;;AAED,QAAI;AAAEC,MAAAA,EAAF;AAAMf,MAAAA,KAAN;AAAaD,MAAAA;AAAb,QAAuBc,QAAQ,CAACN,IAAT,CAAcA,IAAzC;AAEAG,IAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACD,GARD;AASD,CAZI;AAcP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAClEf,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAiDC,QAAD,IAAc;AAC5D,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAClC;AACD;;AAEDI,IAAAA,IAAI;AACL,GAND;AAOD,CARM;AAUP,eAAef,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"SET-USER-DATA\";\r\n\r\nlet initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n  isFetching: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n        isAuth: true,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n// action creators\r\nexport const setAuthUserData = (userId, email, login) => {\r\n  return {\r\n    type: SET_USER_DATA,\r\n    data: {\r\n      userId,\r\n      email,\r\n      login,\r\n    },\r\n  };\r\n};\r\n\r\n// thunk creators\r\nexport const getAuthUserData = () =>\r\n  // thunk\r\n  (dispatch) => {\r\n    authAPI.me().then((response) => {\r\n      if (response.data.resultCode !== 0) {\r\n        return;\r\n      }\r\n\r\n      let { id, login, email } = response.data.data;\r\n\r\n      dispatch(setAuthUserData(id, email, login));\r\n    });\r\n  };\r\n\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n  authAPI.login(email, password, rememberMe).then((response) => {\r\n    if (response.data.resultCode !== 0) {\r\n      return;\r\n    }\r\n\r\n    disp\r\n  });\r\n};\r\n\r\nexport default authReducer;\r\n"]},"metadata":{},"sourceType":"module"}