{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { authAPI } from \"../api/api\";\nconst SET_USER_DATA = \"auth/SET-USER-DATA\";\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  isFetching: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // Action Creators\n\n\nexport const setAuthUserData = (userId, email, login, isAuth = false) => {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  };\n}; // Thunk Creators ------------------// thunk\n\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode !== 0) {\n    return;\n  }\n\n  let {\n    id,\n    login,\n    email\n  } = response.data.data;\n  dispatch(setAuthUserData(id, email, login, true));\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode !== 0) {\n      let serverErrorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n      dispatch(stopSubmit(\"user-login\", {\n        _error: serverErrorMessage\n      }));\n      return;\n    }\n\n    dispatch(getAuthUserData());\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode !== 0) {\n      return;\n    }\n\n    dispatch(setAuthUserData(null, null, null, false));\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["E:/repositories/react-social/src/redux/auth-reducer.js"],"names":["stopSubmit","authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","isFetching","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","then","serverErrorMessage","messages","length","_error","logout"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,MAAMC,aAAa,GAAG,oBAAtB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE,KAJS;AAKjBC,EAAAA,UAAU,EAAE;AALK,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGQ,KADE;AAEL,aAAGC,MAAM,CAACE;AAFL,SAAP;AAID;;AAED;AAAS;AACP,eAAOH,KAAP;AACD;AAVH;AAYD,CAbD,C,CAeA;;;AACA,OAAO,MAAMI,eAAe,GAAG,CAACV,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAM,GAAG,KAAhC,KAA0C;AACvE,SAAO;AACLK,IAAAA,IAAI,EAAEV,aADD;AAELW,IAAAA,OAAO,EAAE;AACPT,MAAAA,MADO;AAEPC,MAAAA,KAFO;AAGPC,MAAAA,KAHO;AAIPC,MAAAA;AAJO;AAFJ,GAAP;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMQ,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACvD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAArB;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC;AACD;;AAED,MAAI;AAAEC,IAAAA,EAAF;AAAMf,IAAAA,KAAN;AAAaD,IAAAA;AAAb,MAAuBY,QAAQ,CAACE,IAAT,CAAcA,IAAzC;AAEAH,EAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACD,CATM;AAWP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAClEf,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EAA2CC,IAA3C,CAAiDP,QAAD,IAAc;AAC5D,QAAIA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC,UAAIK,kBAAkB,GACpBR,QAAQ,CAACE,IAAT,CAAcO,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GACIV,QAAQ,CAACE,IAAT,CAAcO,QAAd,CAAuB,CAAvB,CADJ,GAEI,YAHN;AAKAV,MAAAA,QAAQ,CACNhB,UAAU,CAAC,YAAD,EAAe;AACvB4B,QAAAA,MAAM,EAAEH;AADe,OAAf,CADJ,CAAR;AAKA;AACD;;AAEDT,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACD,GAhBD;AAiBD,CAlBM;AAoBP,OAAO,MAAMc,MAAM,GAAG,MAAOb,QAAD,IAAc;AACxCf,EAAAA,OAAO,CAAC4B,MAAR,GAAiBL,IAAjB,CAAuBP,QAAD,IAAc;AAClC,QAAIA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC;AACD;;AAEDJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACD,GAND;AAOD,CARM;AAUP,eAAeL,WAAf","sourcesContent":["import { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"auth/SET-USER-DATA\";\r\n\r\nlet initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n  isFetching: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n// Action Creators\r\nexport const setAuthUserData = (userId, email, login, isAuth = false) => {\r\n  return {\r\n    type: SET_USER_DATA,\r\n    payload: {\r\n      userId,\r\n      email,\r\n      login,\r\n      isAuth,\r\n    },\r\n  };\r\n};\r\n\r\n// Thunk Creators ------------------// thunk\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  let response = await authAPI.me();\r\n  if (response.data.resultCode !== 0) {\r\n    return;\r\n  }\r\n\r\n  let { id, login, email } = response.data.data;\r\n\r\n  dispatch(setAuthUserData(id, email, login, true));\r\n};\r\n\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n  authAPI.login(email, password, rememberMe).then((response) => {\r\n    if (response.data.resultCode !== 0) {\r\n      let serverErrorMessage =\r\n        response.data.messages.length > 0\r\n          ? response.data.messages[0]\r\n          : \"Some error\";\r\n\r\n      dispatch(\r\n        stopSubmit(\"user-login\", {\r\n          _error: serverErrorMessage,\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    dispatch(getAuthUserData());\r\n  });\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  authAPI.logout().then((response) => {\r\n    if (response.data.resultCode !== 0) {\r\n      return;\r\n    }\r\n\r\n    dispatch(setAuthUserData(null, null, null, false));\r\n  });\r\n};\r\n\r\nexport default authReducer;\r\n"]},"metadata":{},"sourceType":"module"}